---
# This playbook aims to deploy a flask app to an ec2 instance
  - name: Provision an amazon instance
    hosts: local
    connection: local
    gather_facts: no
    # To skip provisioning and use the running instance, use --skip-tags provision
    tags: provision
    tasks:
      - name: Launch the instance
        local_action: 
          ec2 
          instance_tags="Name=moz-flask"
          group={{ security_group }} 
          instance_type={{ instance_type}} 
          image={{ ami_id }}
          wait=true 
          region={{ region }} 
          keypair={{ keypair }}
        register: ec2

      - name: Write down the instance to the host group
        local_action: 
          lineinfile 
          dest=hosts 
          regexp="{{ item.public_dns_name }}" 
          insertafter="[launched]" 
          line="{{ item.public_dns_name }} ansible_ssh_private_key_file={{ key_path }}{{ keypair }}.pem"
        with_items: ec2.instances

      - name: Add the instance to the in-memory host group
        add_host: name={{ item.public_dns_name }}
                  groups=launched 
                  ansible_ssh_private_key_file="{{ key_path }}{{ keypair }}.pem"
        with_items: ec2.instances

      - name: Wait for ssh access
        local_action: "wait_for host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started"
        with_items: ec2.instances  

# Amazon instance is set up and running. We can now apply roles to it
  - name: Configure the instance
    hosts: launched
    sudo: yes
    remote_user: ubuntu
    gather_facts: yes
    roles:
      - common
      - nginx
      - flask-dummy
